
* 2021/11/21

** Arguments to the __init__ function

If the code supports derived classes, the arguments to __init__ need to include
(but separate) the arguments that are destined for the superclasses.

generate_init():
----------------
- the function signature has *all* the parameters, super and derived
  - we need to distinguish required vs. optional
- if the class is derived, the __init__ body must start with a call to super's
  __init__, with only the superclass parameters (required before optional)
- the assignments in the body are done only for the class's own parameters

(Using a PyClass instance, it's easy to include the 'derived' information in
the class, and use it in a gen_init() that's a class method)

generate_build()
----------------
This is specific to this project, so that needs be a method of a class that
we'll derive from PyClass

- for implementing the 'build' calls:
  - it needs the list of ancestor classes
  - it needs the parameters (both attr and elems) for each ancestor class
- for extracting  attributes from the XML tree, it needs self's attributes
- for extracting  sub-elements from the XML tree, it needs self's elements

Attributes and sub-elements are precisely what constitute the class that we
derive from PyClass.

generate_dictify()
------------------
This is a standard part of PyClass. Need to distinguish parameters that are
complex types (python classes), as opposed to scalars, and lists of complex
types (python classes), as opposed to lists of scalars. Also need to know if
the class is derived.

generate_attrs(), generate_sub_elems()
--------------------------------------
Derived class, specific to this XML-based project.

Next step: add support for class derivation in PyClass.

--------------------------------------------------------------------------------

* 2021/11/22

gen_init():
  - needs 'derived' information
  - signature:
      - all the required params, self + ancestors
      - all the optional params, self + ancestors
  - call to super().__init__:
      - all the required params, ancestors
      - all the optional params, ancestors
  - body:
      - all the params (req + opt), self only
      - distinguish mutable or not, i.e. dict/list/other
  - no need to distinguish scalar vs. object instance

gen_dictify():
  - needs 'derived' information (whether to call super or not)
  - body:
      - distinguish object instances (non dictifiable) from scalars
      - distinguish list of object instances (vs. lists of scalars)
      - distinguish dicts of object instances (vs. dicts of scalars)
      - no need to distinguish required vs. optional

gen_build():
  # This is specific to the "parse xml" problem, it'll be in a subclass
  - needs 'derived' information, and list of ancestor classes
  - needs all the params for the ancestors (just the names, not req vs. opt, not
    scalar vs. complex)
  - needs self's attributes
  - need self's elements
      - need to distinguish single vs. list, and scalar vs. complex (4 cases)

--------------------------------------------------------------------------------

* 2021/11/23

PyArg :

- init: we need to know if the arg is a dict, a list, or something else.
- dictify: we need to know if the arg is an object instance or not

Suggestion: stores a type_ member: dict, list, object instance, other (instead
of mutable, array, classname).

--------------------------------------------------------------------------------

* 2021/11/26

** Properties

A class has properties, that appear as arguments to the __init__ method. So in
our model, classes have instances of PyProp, functions have instances of PyArg.

Class properties can be required or optional.

Class properties need to be assigned inside the __init__ method, and for that
we need to distinguish list, dict (mutables), or other (immutable).

Class properties need to be dictified, because we want the ability to dictify
the class instances so they can be json-serialized:

    - immutable: we need to distinguish object instances and others
        if self.toto is not None:
            d['toto'] = self.toto.dictify()   # not json-serializable
	    d['toto'] = self.toto  # json-serializable

    - list:
        if len(self.toto) > 0:
            d['toto'] = [x.dictify() for x in self.toto]  # item is not json-serializable
	    d['toto'] = self.toto  # list of json-serializable items

    - dict:
        if len(self.toto) > 0:
            d['toto'] = [k; v.dictify() for k, v in self.toto.items()]  # item is not json-serializable
	    d['toto'] = self.toto  # dict of json-serializable values

We don't need the actual *type* of the list items or dict values, we just need
to know if the items or values are json-serializable or not. If they aren't, we
need to call dictify() on them.

A class defintion with properties induces a function (the __init__ method) with
arguments.

--------------------------------------------------------------------------------

* 2021/11/27

* Sub-classing PyClass

Defining a dictify() function in the most general case would require knowledge
of items types in collections, but python does not constrain those, so this
does not make a lot of sense. We'll leave the dictifying for those cases where
the schema gives us the right constraints.

For example, in Xml Schema we only have to deal with lists (dictionaries would
be complex types), and we get the item type since lists will be defined as an
element with maxOccurs greater than 1.

** Commit 16a3a34

Remove dictify() and __str__() from pyclass.py to keep it generic.

Dictifying will be done in a specialized pyclass_xsd.py module.

--------------------------------------------------------------------------------

* 2021/11/28

** Commit

PyModule now generates its classes, which in turn generate their methods.

The genclasses.py modules creates python classes, and a module containing those
classes. It never generates source code, this is only done in the pyclass.py
and pyclass_xsd.py modules. The source code generation is triggered by printing
the PyModule object.
